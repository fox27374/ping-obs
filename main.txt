package main

import (
	"fmt"
	"os"
	"sync"
	"time"
)

const maxWorkers = 20

type IPInfo struct {
	IP        string
	Hostname  string
	Reachable bool
	LastSeen  time.Time
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run main.go <IP|CIDR|Range>")
		return
	}

	var allIPs []string
	for _, arg := range os.Args[1:] {
		ips, err := ExpandInput(arg)
		if err != nil {
			fmt.Printf("Error: %v\n", err)
			continue
		}
		allIPs = append(allIPs, ips...)
	}

	allIPs = sortIPs(allIPs)

	// Initialize ipStatus map with empty values so we can print something right away
	ipStatus := make(map[string]IPInfo)
	for _, ip := range allIPs {
		ipStatus[ip] = IPInfo{IP: ip}
	}

	// Initial screen draw (empty state)
	printStatusTable(allIPs, ipStatus)

	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

	for {
		var wg sync.WaitGroup
		sem := make(chan struct{}, maxWorkers)
		mu := sync.Mutex{} // protects ipStatus map

		for _, ip := range allIPs {
			wg.Add(1)
			sem <- struct{}{}
			go func(ip string) {
				defer wg.Done()
				defer func() { <-sem }()

				info := ScanIP(ip)
				mu.Lock()
				ipStatus[ip] = info
				mu.Unlock()
			}(ip)
		}

		wg.Wait()

		printStatusTable(allIPs, ipStatus)

		<-ticker.C
	}
}
